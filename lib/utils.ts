import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

// generated by shadcn
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// created by chatgpt
export function isBase64Image(imageData: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}

// created by chatgpt
export function formatDateString(dateString: string) {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
  };

  const date = new Date(dateString);
  const formattedDate = date.toLocaleDateString(undefined, options);

  const time = date.toLocaleTimeString([], {
    hour: "numeric",
    minute: "2-digit",
  });

  return `${time} - ${formattedDate}`;
}

// created by chatgpt
export function formatThreadCount(count: number): string {
  if (count === 0) {
    return "No Threads";
  } else {
    const threadCount = count.toString().padStart(2, "0");
    const threadWord = count === 1 ? "Thread" : "Threads";
    return `${threadCount} ${threadWord}`;
  }
}

export function getTimeAgoFromNow(date: string) {
  const currentDate = new Date();
  const givenDate = new Date(date);
  const timeDifference = currentDate.getTime() - givenDate.getTime();

  const millisecondsPerSecond = 1000;
  const millisecondsPerMinute = millisecondsPerSecond * 60;
  const millisecondsPerHour = millisecondsPerMinute * 60;
  const millisecondsPerDay = millisecondsPerHour * 24;
  const millisecondsPerWeek = millisecondsPerDay * 7;
  const millisecondsPerMonth = millisecondsPerDay * 30; // Approximation: 30 days per month
  const millisecondsPerYear = millisecondsPerDay * 365; // Approximation: 365 days per year

  if (timeDifference < millisecondsPerSecond) {
    return 'Just now';
  } else if (timeDifference < millisecondsPerMinute) {
    const secondsAgo = Math.floor(timeDifference / millisecondsPerSecond);
    return `${secondsAgo}s`; // S for seconds
  } else if (timeDifference < millisecondsPerHour) {
    const minutesAgo = Math.floor(timeDifference / millisecondsPerMinute);
    return `${minutesAgo}m`; // M for minutes
  } else if (timeDifference < millisecondsPerDay) {
    const hoursAgo = Math.floor(timeDifference / millisecondsPerHour);
    return `${hoursAgo}h`; // H for hours
  } else if (timeDifference < millisecondsPerWeek) {
    const daysAgo = Math.floor(timeDifference / millisecondsPerDay);
    return `${daysAgo}d`; // D for days
  } else if (timeDifference < millisecondsPerMonth) {
    const weeksAgo = Math.floor(timeDifference / millisecondsPerWeek);
    return `${weeksAgo}w`; // W for weeks
  } else if (timeDifference < millisecondsPerYear) {
    const monthsAgo = Math.floor(timeDifference / millisecondsPerMonth);
    return `${monthsAgo}m`; // M for months
  } else {
    const yearsAgo = Math.floor(timeDifference / millisecondsPerYear);
    return `${yearsAgo}y`; // Y for years
  }
}